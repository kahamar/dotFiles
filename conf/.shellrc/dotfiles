# Install all ##################################################################
function dotfiles-install-all() {
	# Check internet connection to github
	if [[ `curl -sL -w "%{http_code}\\n" "http://www.google.com/" -o /dev/null` -eq 200 ]]; then
		if command -v git >/dev/null; then
			# Install homebrew at OS X
			if [ $(uname) = "Darwin" ]; then
				if [[ -d $HOME/.homebrew ]]; then
					cd $HOME && mv -f $HOME/.homebrew $HOME/.homebrew.previous
				fi
				# Clone homebrew from git repo
				git clone https://github.com/Homebrew/homebrew.git $HOME/.homebrew
				$HOME/.homebrew/bin/brew update && $HOME/.homebrew/bin/brew upgrade --all \
				&& $HOME/.homebrew/bin/brew upgrade $HOME/.homebrew/bin/brew-cask \
				&& $HOME/.homebrew/bin/brew cleanup \
				&& $HOME/.homebrew/bin/brew cask cleanup
			fi

			# Install homebrew at Linux
			if [ $(uname) = "Linux" ]; then
				# Install on Debian and Ubuntu
				# sudo apt-get install build-essential curl git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev
				if [[ -d $HOME/.homebrew ]]; then
					cd $HOME && mv -f $HOME/.homebrew $HOME/.homebrew.previous
				fi
				# Clone homebrew from git repo
				git clone https://github.com/Homebrew/linuxbrew.git $HOME/.homebrew
				$HOME/.homebrew/bin/brew update && $HOME/.homebrew/bin/brew upgrade --all \
				&& $HOME/.homebrew/bin/brew upgrade $HOME/.homebrew/bin/brew-cask \
				&& $HOME/.homebrew/bin/brew cleanup \
				&& $HOME/.homebrew/bin/brew cask cleanup
			fi

			# Install VIM neobundle.vim plugin
			curl -L https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | /bin/bash -s --

			# Install oh-my-zsh and modules
			if [[ -d $HOME/.oh-my-zsh ]]; then
				cd $HOME && mv -f $HOME/.oh-my-zsh $HOME/.oh-my-zsh.previous
			fi
			git clone https://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh

			# Install TMUX Plugin Manager
			if [[ -d $HOME/.tmux ]]; then
				cd $HOME && mv -f $HOME/.tmux $HOME/.tmux.previous
			fi
			mkdir -p $HOME/.tmux/plugins && git clone https://github.com/tmux-plugins/tpm $HOME/.tmux/plugins/tpm
			else
				echo "Stop execution. Please install git"
			fi
		fi
}

# Update All ###################################################################
function dotfiles-update-all() {
	# Check internet connection to github
	if [[ `curl -sL -w "%{http_code}\\n" "http://www.google.com/" -o /dev/null` -eq 200 ]]; then
		# Update dotFiles
		pushd $DOTFILES && git pull && git pull --recurse-submodules && popd && source $DOTFILES/conf/.zshrc

		# Update brew
		# TODO: add cask check and install if missing. brew install caskroom/cask/brew-cask
		if [ $(uname) = "Darwin" ]; then
			if command -v brew >/dev/null; then
				$HOMEBREW/bin/brew update \
				&& $HOMEBREW/bin/brew upgrade --all \
				&& $HOMEBREW/bin/brew cleanup \
				&& $HOMEBREW/bin/brew cask cleanup
			fi
		fi
		if [ $(uname) = "Linux" ]; then
			if command -v brew >/dev/null; then
				$HOMEBREW/bin/brew update \
				&& $HOMEBREW/bin/brew upgrade --all \
				&& $HOMEBREW/bin/brew cleanup \
				&& $HOMEBREW/bin/brew cask cleanup
			fi
		fi

		# Update oh-my-zsh and modules
		if [[ -d $ZSH ]]; then
			pushd $ZSH && git pull && pushd $ZSH && git pull --recurse-submodules && popd && popd
		fi

		# Update TMUX Plugin Manager
		if [[ -d $HOME/.tmux/plugins ]]; then
			for file in $HOME/.tmux/plugins/*
			do
				if [[ -d $file ]]; then
					pushd $file
						if [[ -d '.git' ]]; then
							git pull
						fi
					popd
				fi
			done
		fi

		# Update Vim Plugins
		if [[ -d $HOME/.vim/bundle ]]; then
			for file in $HOME/.vim/bundle/*
			do
				if [[ -d $file ]]; then
					pushd $file
						if [[ -d '.git' ]]; then
							git pull
						fi
					popd
				fi
			done
		fi
	else
		echo "Offline. No connection to github"
	fi
}

# Create aliases ###############################################################
function dotfiles-aliases-all() {
	# Create aliases
	if [ -d $DOTFILES ]; then
		for file in $DOTFILES/conf/.*
			do
				f=`echo $file | awk -F"/" '{print $NF}'`
				if [ $f != . ] && [ $f != .. ]; then
					mv -f $HOME/$f $HOME/$f.previous
					ln -sf $file $HOME
				fi
			done
	else
		echo "404: $DOTFILES folder not found"
	fi
}
